{"version":3,"sources":["signup.js"],"names":["Signup","req","res","schema","firstname","Joi","string","min","max","required","lastname","gender","valid","address","email","password","regex","result","validate","body","error","status","json","details","message","isAdmin","id","db","length","user","createOn","Date","format","find","users","send","bcrypt","genSalt","salt","hash","token","jwt","sign","push","data","signup"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;0FACeC,G,EAAKC,G;;;;;;;AACZC,sB,GAAS;AACbC,6BAAWC,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EADE;AAEbC,4BAAUL,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EAFG;AAGbE,0BAAQN,cAAIC,MAAJ,GAAaM,KAAb,CAAmB,MAAnB,EAA2B,QAA3B,EAAqCL,GAArC,CAAyC,CAAzC,EAA4CC,GAA5C,CAAgD,EAAhD,EAAoDC,QAApD,EAHK;AAIbI,2BAASR,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BC,QAA5B,EAJI;AAKbK,yBAAOT,cAAIC,MAAJ,GAAaQ,KAAb,GAAqBL,QAArB,EALM;AAMbM,4BAAUV,cAAIC,MAAJ,GAAaU,KAAb,CAAmB,qBAAnB,EAA0CP,QAA1C;AANG,iB;AAQTQ,sB,GAASZ,cAAIa,QAAJ,CAAajB,IAAIkB,IAAjB,EAAuBhB,MAAvB,C;;qBACXc,OAAOG,K;;;;;iDACFlB,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,OAAOG,KAAP,CAAaG,OAAb,CAAqB,CAArB,EAAwBC,OAA7C,C;;;4BAEgDvB,IAAIkB,I,EAAtDf,S,aAAAA,S,EAAUM,Q,aAAAA,Q,EAASC,M,aAAAA,M,EAAOE,O,aAAAA,O,EAAQC,K,aAAAA,K,EAAMC,Q,aAAAA,Q;AACzCU,uB,GAAU,K;AACVC,kB,GAAKC,kBAAGC,MAAH,GAAU,C;AACfP,sB,GAAS,Y;AACTQ,oB,GAAO;AACXH,wBADW;AAEXtB,sCAFW;AAGXM,oCAHW;AAIXC,gCAJW;AAKXE,kCALW;AAMXC,8BANW;AAOXC,oCAPW;AAQXM,gCARW;AASXI,kCATW;AAUXK,4BAAS,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,sBAA1B;AAVE,iB;;qBAYVL,kBAAGM,IAAH,CAAQ;AAAA,yBAASC,MAAMpB,KAAN,KAAgBA,KAAzB;AAAA,iBAAR,C;;;;;iDACMZ,IAAImB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAC1Bd,0BAAQ,GADkB;AAE1BD,yBAAO;AAFmB,iBAArB,C;;;;uBAKUgB,iBAAOC,OAAP,CAAe,EAAf,C;;;AAAbC,oB;;uBACgBF,iBAAOG,IAAP,CAAYV,KAAKd,QAAjB,EAA2BuB,IAA3B,C;;;AAAtBT,qBAAKd,Q;AACCyB,qB,GAAQC,uBAAIC,IAAJ,CAAS,EAACb,MAAKF,kBAAGgB,IAAH,CAAQd,IAAR,CAAN,EAAT,EAA8B,YAA9B,C;iDACP3B,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,GADkB;AAE1BG,2BAAS,2BAFiB;AAG1BoB,wBAAM,CAAC,EAACJ,YAAD,EAAOX,UAAP,EAAD;AAHoB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAOf,IAAMgB,SAAS,IAAI7C,MAAJ,EAAf;kBACe6C,M","file":"signup.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/user","sourcesContent":["import db from '../../models/usersDb';\nimport moment from 'moment';\nimport Joi from 'joi';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nclass Signup{\n   async  userSignup(req, res) {\n        const schema = {\n          firstname: Joi.string().min(3).max(25).required(),\n          lastname: Joi.string().min(3).max(20).required(),\n          gender: Joi.string().valid(\"Male\", \"Female\").min(3).max(10).required(),\n          address: Joi.string().min(3).max(25).required(),\n          email: Joi.string().email().required(),\n          password: Joi.string().regex(/^[a-zA-Z0-9]{5,30}$/).required(),\n        };\n        const result = Joi.validate(req.body, schema);\n        if (result.error) {\n          return res.status(400).json(result.error.details[0].message);\n        }\n        const {firstname,lastname,gender,address,email,password}=req.body;\n        const isAdmin = false;\n        const id = db.length+1;\n        const status = 'unverified';\n        const user = {\n          id,\n          firstname,\n          lastname,\n          gender,\n          address,\n          email,\n          password,\n          status,\n          isAdmin,\n          createOn:moment(new Date()).format('YYYY-MMM-DD HH:MM:SS'),      \n        };\n        if(db.find(users => users.email === email)){\n          return res.status(409).send({\n            status: 409,\n            error: 'Email already being used by another user',\n          });\n        }\n        const salt = await bcrypt.genSalt(10);\n        user.password = await bcrypt.hash(user.password, salt);\n        const token = jwt.sign({user:db.push(user)},\"secret-key\");\n        return res.status(201).json({\n          status: 201,\n          message: \"user created successfully\",\n          data: [{token,user}],\n        });\n      }    \n}\nconst signup = new Signup();\nexport default signup;"]}