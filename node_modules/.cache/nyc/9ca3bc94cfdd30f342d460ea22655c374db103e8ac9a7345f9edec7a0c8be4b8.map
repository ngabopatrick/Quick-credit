{"version":3,"sources":["repayment.js"],"names":["RepaymentController","req","res","loanId","parseInt","params","id","paidAmount","Number","body","loan","loandb","find","item","status","json","error","repaid","newBalance","balance","toFixed","repayment","repayments","length","email","paidOn","Date","format","amount","monthlyInstallment","paymentInstallment","push","data","newData","createdOn","send","repaymentController"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,mB;;;;;;;kCACQC,G,EAAKC,G,EAAK;AAChB,gBAAMC,SAASC,SAASH,IAAII,MAAJ,CAAWC,EAApB,EAAwB,EAAxB,CAAf;AACA,gBAAMC,aAAaC,OAAOP,IAAIQ,IAAJ,CAASF,UAAhB,CAAnB;AACA,gBAAMG,OAAOC,iBAAOC,IAAP,CAAY;AAAA,uBAAQC,KAAKP,EAAL,KAAYH,MAApB;AAAA,aAAZ,CAAb;AACA,gBAAI,CAACO,IAAL,EAAW;AACP,uBAAOR,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;AACD,gBAAIN,KAAKO,MAAT,EAAiB;AACb,uBAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;AACD,gBAAME,aAAaV,OAAOE,KAAKS,OAAL,GAAeZ,UAAtB,EAAkCa,OAAlC,CAA0C,CAA1C,CAAnB;AACAV,iBAAKS,OAAL,GAAeD,UAAf;AACA,gBAAIA,eAAe,CAAnB,EAAsB;AAClBR,qBAAKO,MAAL,GAAc,IAAd;AACH;AACD,gBAAMI,YAAY;AACdf,oBAAIgB,sBAAWC,MAAX,GAAoB,GADV;AAEdpB,8BAFc;AAGdqB,uBAAOd,KAAKc,KAHE;AAIdC,wBAAQ,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,qBAA1B,CAJM;AAKdpB,sCALc;AAMdqB,wBAAQlB,KAAKkB,MANC;AAOdC,oCAAoBnB,KAAKoB,kBAPX;AAQdX,yBAAST,KAAKS;AARA,aAAlB;AAUAG,kCAAWS,IAAX,CAAgBV,SAAhB;AACA,mBAAOnB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,wBAAQ,GADgB;AAExBkB,sBAAMX;AAFkB,aAArB,CAAP;AAIH;;;qCAEYpB,G,EAAKC,G,EAAK;AAAA,gBAEfI,EAFe,GAGfL,IAAII,MAHW,CAEfC,EAFe;;AAInB,gBAAM0B,OAAOV,sBAAWV,IAAX,CAAgB;AAAA,uBAAaS,UAAUf,EAAV,KAAiBF,SAASE,EAAT,EAAa,EAAb,CAA9B;AAAA,aAAhB,CAAb;AACA,gBAAI0B,IAAJ,EAAU;AACN,oBAAMC,UAAU;AACZ9B,4BAAQ6B,KAAK7B,MADD;AAEZqB,2BAAOQ,KAAKR,KAFA;AAGZU,+BAAWF,KAAKE,SAHJ;AAIZJ,wCAAoBE,KAAKF,kBAJb;AAKZF,4BAAQI,KAAKJ,MALD;AAMZT,6BAASa,KAAKb;AANF,iBAAhB;AAQA,uBAAOjB,IAAIY,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACxBrB,4BAAQ,GADgB;AAExBkB,0BAAM,CAACC,OAAD;AAFkB,iBAArB,CAAP;AAIH;AACD,mBAAO/B,IAAIY,MAAJ,CAAW,GAAX,EAAgBqB,IAAhB,CAAqB;AACxBrB,wBAAQ,GADgB;AAExBE,uBAAO;AAFiB,aAArB,CAAP;AAIH;;;;;;AAEL,IAAMoB,sBAAsB,IAAIpC,mBAAJ,EAA5B;kBACeoC,mB","file":"repayment.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/repay","sourcesContent":["import repayments from '../../models/repaymentDb';\nimport loandb from '../../models/loanDb';\nimport moment from 'moment';\n\nclass RepaymentController {\n    repayLoan(req, res) {\n        const loanId = parseInt(req.params.id, 10);\n        const paidAmount = Number(req.body.paidAmount);\n        const loan = loandb.find(item => item.id === loanId);\n        if (!loan) {\n            return res.status(400).json({\n                status: 400,\n                error: 'Loan with that Id not found',\n            });\n        }\n        if (loan.repaid) {\n            return res.status(400).json({\n                status: 400,\n                error: 'You have fully paid your loan already',\n            });\n        }\n        const newBalance = Number(loan.balance - paidAmount).toFixed(2);\n        loan.balance = newBalance;\n        if (newBalance === 0) {\n            loan.repaid = true;\n        }\n        const repayment = {\n            id: repayments.length + 100,\n            loanId,\n            email: loan.email,\n            paidOn: moment(new Date()).format('YYYY-MM-DD HH:MM:SS'),\n            paidAmount,\n            amount: loan.amount,\n            monthlyInstallment: loan.paymentInstallment,\n            balance: loan.balance,\n        };\n        repayments.push(repayment);\n        return res.status(201).json({\n            status: 201,\n            data: repayment,\n        });\n    }\n\n    getRepayment(req, res) {\n        const {\n            id\n        } = req.params;\n        const data = repayments.find(repayment => repayment.id === parseInt(id, 10));\n        if (data) {\n            const newData = {\n                loanId: data.loanId,\n                email: data.email,\n                createdOn: data.createdOn,\n                paymentInstallment: data.paymentInstallment,\n                amount: data.amount,\n                balance: data.balance,\n            };\n            return res.status(200).send({\n                status: 200,\n                data: [newData],\n            });\n        }\n        return res.status(404).send({\n            status: 404,\n            error: 'No Loan with that id found!',\n        });\n    }\n}\nconst repaymentController = new RepaymentController();\nexport default repaymentController;"]}