{"version":3,"sources":["signup.js"],"names":["Signup","req","res","validateUser","signupValidation","body","error","status","json","details","message","firstname","lastname","gender","address","email","password","isAdmin","id","db","length","user","createOn","Date","format","find","users","send","bcrypt","genSalt","salt","hash","token","jwt","sign","push","data","signup"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;0FACeC,G,EAAKC,G;;;;;;;wCACFC,qBAAaC,gBAAb,CAA8BH,IAAII,IAAlC,C,EAATC,K,yBAAAA,K;;qBACHA,K;;;;;iDAAcJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAAMG,OAAN,CAAc,CAAd,EAAiBC,OAAtC,C;;;4BACuCT,IAAII,I,EAAtDM,S,aAAAA,S,EAAUC,Q,aAAAA,Q,EAASC,M,aAAAA,M,EAAOC,O,aAAAA,O,EAAQC,K,aAAAA,K,EAAMC,Q,aAAAA,Q;AACzCC,uB,GAAU,K;AACVC,kB,GAAKC,kBAAGC,MAAH,GAAU,C;AACfb,sB,GAAS,Y;AACTc,oB,GAAO;AACXH,wBADW;AAEXP,sCAFW;AAGXC,oCAHW;AAIXC,gCAJW;AAKXC,kCALW;AAMXC,8BANW;AAOXC,oCAPW;AAQXT,gCARW;AASXU,kCATW;AAUXK,4BAAS,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,sBAA1B;AAVE,iB;;qBAYVL,kBAAGM,IAAH,CAAQ;AAAA,yBAASC,MAAMX,KAAN,KAAgBA,KAAzB;AAAA,iBAAR,C;;;;;iDACMb,IAAIK,MAAJ,CAAW,GAAX,EAAgBoB,IAAhB,CAAqB;AAC1BpB,0BAAQ,GADkB;AAE1BD,yBAAO;AAFmB,iBAArB,C;;;;uBAKUsB,iBAAOC,OAAP,CAAe,EAAf,C;;;AAAbC,oB;;uBACgBF,iBAAOG,IAAP,CAAYV,KAAKL,QAAjB,EAA2Bc,IAA3B,C;;;AAAtBT,qBAAKL,Q;AACCgB,qB,GAAQC,uBAAIC,IAAJ,CAAS,EAACb,MAAKF,kBAAGgB,IAAH,CAAQd,IAAR,CAAN,EAAT,EAA8B,YAA9B,C;iDACPnB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,GADkB;AAE1BG,2BAAS,2BAFiB;AAG1B0B,wBAAM,CAAC,EAACJ,YAAD,EAAOX,UAAP,EAAD;AAHoB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAOf,IAAMgB,SAAS,IAAIrC,MAAJ,EAAf;kBACeqC,M","file":"signup.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/user","sourcesContent":["import db from '../../models/usersDb';\nimport validateUser from '../../helpers/validation';\nimport moment from 'moment';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nclass Signup{\n   async  userSignup(req, res) {\n        const {error} = validateUser.signupValidation(req.body);\n        if (error) return res.status(400).json(error.details[0].message);\n        const {firstname,lastname,gender,address,email,password}=req.body;\n        const isAdmin = false;\n        const id = db.length+1;\n        const status = 'unverified';\n        const user = {\n          id,\n          firstname,\n          lastname,\n          gender,\n          address,\n          email,\n          password,\n          status,\n          isAdmin,\n          createOn:moment(new Date()).format('YYYY-MMM-DD HH:MM:SS'),      \n        };\n        if(db.find(users => users.email === email)){\n          return res.status(409).send({\n            status: 409,\n            error: 'Email already being used by another user',\n          });\n        }\n        const salt = await bcrypt.genSalt(10);\n        user.password = await bcrypt.hash(user.password, salt);\n        const token = jwt.sign({user:db.push(user)},\"secret-key\");\n        return res.status(201).json({\n          status: 201,\n          message: \"user created successfully\",\n          data: [{token,user}],\n        });\n      }    \n}\nconst signup = new Signup();\nexport default signup;"]}