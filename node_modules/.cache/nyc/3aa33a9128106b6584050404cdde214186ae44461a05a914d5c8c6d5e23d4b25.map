{"version":3,"sources":["applyLoan.js"],"names":["ApplyLoan","req","res","appValidation","applyValidation","body","error","status","json","details","message","email","tenor","amount","id","loanDb","length","interest","parseInt","toFixed","paymentInstallment","balance","loan","repaid","createdOn","Date","format","find","user","send","push","data","applyLoan"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,S;;;;;;;;gGACcC,G,EAAKC,G;;;;;;;wDACDC,qBAAcC,eAAd,CAA8BH,IAAII,IAAlC,C,EAATC,K,yBAAAA,K;;qCACHA,K;;;;;iEAAcJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAAMG,OAAN,CAAc,CAAd,EAAiBC,OAAtC,C;;;4CACWT,IAAII,I,EAA1BM,K,aAAAA,K,EAAMC,K,aAAAA,K,EAAMC,M,aAAAA,M;AACbC,kC,GAAKC,iBAAOC,MAAP,GAAgB,C;AACrBC,wC,GAAW,OAAOC,SAASL,MAAT,EAAiB,EAAjB,EAAqBM,OAArB,CAA6B,CAA7B,C;AAClBC,kD,GAAqB,CAACF,SAASL,MAAT,EAAgB,EAAhB,IAAsBK,SAASD,QAAT,EAAkB,EAAlB,CAAvB,EAA8CE,OAA9C,CAAsD,CAAtD,IAAyDD,SAASN,KAAT,EAAe,EAAf,EAAmBO,OAAnB,CAA2B,CAA3B,C;AAC9EE,uC,GAAUH,SAASL,MAAT,EAAiB,EAAjB,EAAqBM,OAArB,CAA6B,CAA7B,C;AACVG,oC,GAAO;AACTR,0CADS;AAETH,gDAFS;AAGTE,kDAHS;AAITD,gDAJS;AAKTQ,0EALS;AAMTC,oDANS;AAOTd,4CAAQ,SAPC;AAQTgB,4CAAQ,KARC;AASTC,+CAAU,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,qBAA1B;AATD,iC;;qCAWVX,iBAAOY,IAAP,CAAY;AAAA,2CAAQC,KAAKjB,KAAL,KAAeA,KAAvB;AAAA,iCAAZ,C;;;;;iEACQT,IAAIK,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqB;AACxBtB,4CAAQ,GADgB;AAExBD,2CAAO;AAFiB,iCAArB,C;;;AAKXS,iDAAOe,IAAP,CAAYR,IAAZ;iEACOpB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4CAAQ,GADgB;AAExBG,6CAAS,2BAFe;AAGxBqB,0CAAMT;AAHkB,iCAArB,C;;;;;;;;;;;;;;;;;;;;;AAOf,IAAMU,YAAY,IAAIhC,SAAJ,EAAlB;kBACegC,S","file":"applyLoan.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/loan","sourcesContent":["import loanDb from '../../models/loanDb';\nimport appValidation from '../../helpers/validation';\nimport moment from 'moment';\n\nclass ApplyLoan{\n    async loanApply(req, res) { \n        const {error} = appValidation.applyValidation(req.body);\n        if (error) return res.status(400).json(error.details[0].message);\n        const {email,tenor,amount} = req.body;\n        const id = loanDb.length + 1;\n        const interest = 0.05 * parseInt(amount, 10).toFixed(2);\n        const paymentInstallment = (parseInt(amount,10) + parseInt(interest,10)).toFixed(2)/parseInt(tenor,10).toFixed(2); \n        const balance = parseInt(amount, 10).toFixed(2);\n        const loan = {\n            id,\n            email,  \n            amount,\n            tenor,\n            paymentInstallment,\n            balance,\n            status: 'pending',\n            repaid: false,\n            createdOn:moment(new Date()).format('YYYY-MM-DD HH:MM:SS'),\n        };\n        if(loanDb.find(user => user.email === email)){\n            return res.status(409).send({\n                status: 409,\n                error: 'You have already applied for loan!',\n              });\n        }\n        loanDb.push(loan);\n        return res.status(201).json({\n            status: 201,\n            message: \"loan created successfully\",\n            data: loan,\n        });\n    }\n}\nconst applyLoan = new ApplyLoan();\nexport default applyLoan;"]}