{"version":3,"sources":["userController.js"],"names":["UserController","req","res","db","length","status","json","message","Users","id","parseInt","params","map","user","send","schema","firstname","Joi","string","min","max","required","lastname","gender","valid","address","email","password","regex","result","validate","body","error","details","bcrypt","genSalt","salt","hash","push","data","userController"],"mappings":"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","file":"userController.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/user","sourcesContent":["import db from \"../../models/usersDb\";\r\nimport Joi from \"joi\";\r\nimport bcrypt from 'bcrypt';\r\n\r\nclass UserController {\r\n  getUsers(req, res) {\r\n    if (db.length >= 1) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: \"users retrieved successfully\",\r\n        Users: db,\r\n      });\r\n    } else\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: \"No users found\",\r\n      });\r\n  }\r\n  getUser(req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    db.map(user => {\r\n      if (user.id === id) {\r\n        return res.status(200).send({\r\n          status: \"200\",\r\n          message: \"user retrieved successfully\",\r\n          user\r\n        });\r\n      }\r\n    });\r\n    return res.status(404).send({\r\n      status: \"404\",\r\n      message: \"user does not exist\"\r\n    });\r\n  }\r\n\r\n  async createUser(req, res) {\r\n    const schema = {\r\n      firstname: Joi.string().min(3).max(25).required(),\r\n      lastname: Joi.string().min(3).max(20).required(),\r\n      gender: Joi.string().valid(\"Male\", \"Female\").min(3).max(10).required(),\r\n      address: Joi.string().min(3).max(25).required(),\r\n      email: Joi.string().email().required(),\r\n      password: Joi.string().regex(/^[a-zA-Z0-9]{5,30}$/).required(),\r\n    };\r\n    const result = Joi.validate(req.body, schema);\r\n    if (result.error) {\r\n      return res.status(400).json(result.error.details[0].message);\r\n    }\r\n    const user = {\r\n      id: db.length + 1,\r\n      firstname: req.body.firstname,\r\n      lastname: req.body.lastname,\r\n      gender: req.body.gender,\r\n      address: req.body.gender,\r\n      email: req.body.email,\r\n      password: req.body.password,\r\n    };\r\n    const salt = await bcrypt.genSalt(10);\r\n    user.password = await bcrypt.hash(user.password,salt);\r\n    db.push(user);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      message: \"user created successfully\",\r\n      data: user,\r\n    });\r\n  }\r\n}\r\nconst userController = new UserController();\r\nexport default userController;"]}