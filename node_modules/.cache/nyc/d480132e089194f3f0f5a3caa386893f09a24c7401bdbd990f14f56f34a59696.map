{"version":3,"sources":["applyLoan.js"],"names":["ApplyLoan","req","res","schema","email","Joi","string","required","tenor","number","integer","positive","max","amount","precision","result","validate","body","error","status","json","details","message","id","loanDb","length","interest","parseInt","toFixed","paymentInstallment","balance","loan","repaid","createdOn","Date","format","find","user","send","push","data","applyLoan"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,S;;;;;;;;gGACcC,G,EAAKC,G;;;;;;;AACXC,sC,GAAS;AACXC,2CAAOC,cAAIC,MAAJ,GAAaF,KAAb,GAAqBG,QAArB,EADI;AAEXC,2CAAOH,cAAII,MAAJ,GAAaC,OAAb,GAAuBC,QAAvB,GAAkCC,GAAlC,CAAsC,EAAtC,EAA0CL,QAA1C,EAFI;AAGXM,4CAAOR,cAAII,MAAJ,GAAaK,SAAb,CAAuB,CAAvB,EAA0BP,QAA1B;AAHI,iC;AAKTQ,sC,GAASV,cAAIW,QAAJ,CAAaf,IAAIgB,IAAjB,EAAuBd,MAAvB,C;;qCACXY,OAAOG,K;;;;;iEACAhB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,OAAOG,KAAP,CAAaG,OAAb,CAAqB,CAArB,EAAwBC,OAA7C,C;;;4CAEkBrB,IAAIgB,I,EAA1Bb,K,aAAAA,K,EAAMI,K,aAAAA,K,EAAMK,M,aAAAA,M;AACbU,kC,GAAKC,iBAAOC,MAAP,GAAgB,C;AACvBC,wC,GAAW,OAAOC,SAASd,MAAT,EAAiB,EAAjB,EAAqBe,OAArB,CAA6B,CAA7B,C;AAChBC,kD,GAAqB,CAACF,SAASd,MAAT,EAAgB,EAAhB,IAAsBc,SAASD,QAAT,EAAkB,EAAlB,CAAvB,EAA8CE,OAA9C,CAAsD,CAAtD,IAAyDD,SAASnB,KAAT,EAAe,EAAf,EAAmBoB,OAAnB,CAA2B,CAA3B,C;AAC9EE,uC,GAAUH,SAASd,MAAT,EAAiB,EAAjB,EAAqBe,OAArB,CAA6B,CAA7B,C;AACVG,oC,GAAO;AACTR,0CADS;AAETnB,gDAFS;AAGTS,kDAHS;AAITL,gDAJS;AAKTqB,0EALS;AAMTC,oDANS;AAOTX,4CAAQ,SAPC;AAQTa,4CAAQ,KARC;AASTC,+CAAU,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,qBAA1B;AATD,iC;;qCAWVX,iBAAOY,IAAP,CAAY;AAAA,2CAAQC,KAAKjC,KAAL,KAAeA,KAAvB;AAAA,iCAAZ,C;;;;;iEACQF,IAAIiB,MAAJ,CAAW,GAAX,EAAgBmB,IAAhB,CAAqB;AACxBnB,4CAAQ,GADgB;AAExBD,2CAAO;AAFiB,iCAArB,C;;;AAKXM,iDAAOe,IAAP,CAAYR,IAAZ;iEACO7B,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4CAAQ,GADgB;AAExBG,6CAAS,2BAFe;AAGxBkB,0CAAMT;AAHkB,iCAArB,C;;;;;;;;;;;;;;;;;;;;;AAOf,IAAMU,YAAY,IAAIzC,SAAJ,EAAlB;kBACeyC,S","file":"applyLoan.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/loan","sourcesContent":["import loanDb from '../../models/loanDb';\nimport Joi from 'joi';\nimport moment from 'moment';\n\nclass ApplyLoan{\n    async loanApply(req, res) {\n        const schema = {\n            email: Joi.string().email().required(),\n            tenor: Joi.number().integer().positive().max(12).required(),\n            amount:Joi.number().precision(2).required(),\n        };\n        const result = Joi.validate(req.body, schema);\n        if (result.error) {\n            return res.status(400).json(result.error.details[0].message);\n        }\n        const {email,tenor,amount} = req.body;\n        const id = loanDb.length + 1;\n      const interest = 0.05 * parseInt(amount, 10).toFixed(2);\n        const paymentInstallment = (parseInt(amount,10) + parseInt(interest,10)).toFixed(2)/parseInt(tenor,10).toFixed(2); \n        const balance = parseInt(amount, 10).toFixed(2);\n        const loan = {\n            id,\n            email,  \n            amount,\n            tenor,\n            paymentInstallment,\n            balance,\n            status: 'pending',\n            repaid: false,\n            createdOn:moment(new Date()).format('YYYY-MM-DD HH:MM:SS'),\n        };\n        if(loanDb.find(user => user.email === email)){\n            return res.status(409).send({\n                status: 409,\n                error: 'You have already applied for loan!',\n              });\n        }\n        loanDb.push(loan);\n        return res.status(201).json({\n            status: 201,\n            message: \"loan created successfully\",\n            data: loan,\n        });\n    }\n}\nconst applyLoan = new ApplyLoan();\nexport default applyLoan;"]}