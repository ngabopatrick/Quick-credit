{"version":3,"sources":["signIn.js"],"names":["Signin","req","res","body","email","password","findUser","db","find","user","status","send","error","bcrypt","compare","validPassword","id","firstname","lastname","isAdmin","payload","SECRET_KEY","token","jwt","sign","expiresIn","result","json","message","signin"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;0FACSC,G,EAAKC,G;;;;;;;4BAIZD,IAAIE,I,EAFNC,K,aAAAA,K,EACAC,Q,aAAAA,Q;AAEIC,wB,GAAWC,kBAAGC,IAAH,CAAQ;AAAA,yBAAQC,KAAKL,KAAL,KAAeA,KAAvB;AAAA,iBAAR,C;;oBACZE,Q;;;;;iDACIJ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,GADkB;AAE1BE,yBAAO;AAFmB,iBAArB,C;;;;uBAKmBC,iBAAOC,OAAP,CAAeT,QAAf,EAAyBC,SAASD,QAAlC,C;;;AAAtBU,6B;;oBACDA,a;;;;;iDACIb,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,0BAAQ,GADkB;AAE1BE,yBAAO;AAFmB,iBAArB,C;;;AAMPI,kB,GAKEV,Q,CALFU,E,EACAC,S,GAIEX,Q,CAJFW,S,EACAC,Q,GAGEZ,Q,CAHFY,Q,EACAR,M,GAEEJ,Q,CAFFI,M,EACAS,O,GACEb,Q,CADFa,O;AAGIC,uB,GAAU;AACdJ,wBADc;AAEdC,sCAFc;AAGdC,oCAHc;AAIdd,8BAJc;AAKdM,gCALc;AAMdS;AANc,iB;AAQVE,0B,GAAa,gB;AACbC,qB,GAAQC,uBAAIC,IAAJ,CAASJ,OAAT,EAAkBC,UAAlB,EAA8B;AAC1CI,6BAAW;AAD+B,iBAA9B,C;AAIRC,sB,GAAS;AACbJ,8BADa;AAEbN,wBAFa;AAGbC,sCAHa;AAIbC,oCAJa;AAKbd;AALa,iB;iDAORF,IAAIQ,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqB;AAC1BL,8BAD0B;AAE1BZ,0BAAO,GAFmB;AAG1BkB,2BAAS;AAHiB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAOX,IAAMC,SAAS,IAAI7B,MAAJ,EAAf;kBACe6B,M","file":"signIn.js","sourceRoot":"/home/ngabonziza/Desktop/camp6/Quick-credit/server/controllers/user","sourcesContent":["import db from '../../models/usersDb';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nclass Signin {\n  async signin(req, res) {\n    const {\n      email,\n      password,\n    } = req.body;\n    const findUser = db.find(user => user.email === email);\n    if (!findUser) {\n      return res.status(400).send({\n        status: 400,\n        error: 'Invalid username or password',\n      });\n    }\n    const validPassword = await bcrypt.compare(password, findUser.password);\n    if (!validPassword) {\n      return res.status(400).send({\n        status: 400,\n        error: 'Invalid username or password',\n      });\n    }\n    const {\n      id,\n      firstname,\n      lastname,\n      status,\n      isAdmin,\n    } = findUser;\n\n    const payload = {\n      id,\n      firstname,\n      lastname,\n      email,\n      status,\n      isAdmin,\n    };\n    const SECRET_KEY = \"secretkey23456\";\n    const token = jwt.sign(payload, SECRET_KEY, {\n      expiresIn: '1h'\n    });\n\n    const result = {\n      token,\n      id,\n      firstname,\n      lastname,\n      email,\n    };\n    return res.status(200).json({\n      token,\n      status:200,\n      message: 'Login successfull',\n    });\n  }\n}\nconst signin = new Signin();\nexport default signin;\n\n"]}